#!/bin/bash
#
# @file init_setup.sh
# @description AI Evolution Engine Seed initialization script
# @author IT-Journey Team <team@it-journey.org>
# @created 2025-07-05
# @lastModified 2025-07-06
# @version 0.4.1
#
# @relatedIssues 
#   - Initialize AI Evolution Engine seed repository
#   - Test framework reorganization
#
# @relatedEvolutions
#   - v0.4.1: Updated to reflect test framework reorganization
#   - v0.4.0: Enhanced with modular architecture support
#
# @dependencies
#   - bash: >=4.0
#   - git: For repository management
#   - github cli (gh): For workflow operations
#
# @changelog
#   - 2025-07-06: Updated test paths and validation - ITJ
#   - 2025-07-05: Enhanced with modular library support - ITJ
#   - 2025-07-05: Initial creation - ITJ
#
# @usage ./init_setup.sh [--skip-validation]
# @notes AI Evolution Engine Seed initialization with test framework organization
#

set -euo pipefail

echo "🌱 AI Evolution Engine Seed - Initialization"
echo "============================================="
echo "Version: 0.4.1 - Test Framework Organized"
echo ""

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if --skip-validation flag is passed
SKIP_VALIDATION=false
if [[ "${1:-}" == "--skip-validation" ]]; then
    SKIP_VALIDATION=true
    log_warning "Skipping validation checks as requested"
fi

log_info "Initializing AI Evolution Engine Seed..."

# Step 1: Validate environment
log_info "Step 1: Environment validation"

if ! command -v git &> /dev/null; then
    log_error "Git is required but not installed"
    exit 1
fi

if ! command -v gh &> /dev/null; then
    log_warning "GitHub CLI (gh) not found - some features may be limited"
else
    log_success "GitHub CLI available"
fi

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    log_info "Initializing git repository..."
    git init
    git add .
    git commit -m "Initial seed commit"
    log_success "Git repository initialized"
else
    log_success "Git repository detected"
fi

# Step 2: Setup directory structure
log_info "Step 2: Directory structure setup"

# Create essential directories if they don't exist
directories=(
    "logs"
    "scripts"
    "tests/workflows"
    "tests/seed"
    "tests/lib"
    "tests/unit"
    "tests/integration"
    "tests/fixtures"
    "src/lib/core"
    "src/lib/utils"
    "src/lib/integration"
    "src/lib/analysis"
    "src/lib/template"
    "docs/guides"
    "docs/architecture"
    "docs/evolution"
    "docs/workflows"
    "prompts"
    "templates"
)

for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        log_success "Created directory: $dir"
    fi
done

# Step 3: Make scripts executable
log_info "Step 3: Setting up script permissions"

# Make all shell scripts executable
find . -name "*.sh" -type f -exec chmod +x {} \;
log_success "All shell scripts made executable"

# Step 4: Validate test framework organization
if [ "$SKIP_VALIDATION" = false ]; then
    log_info "Step 4: Validating test framework organization"
    
    # Check for test files in new locations
    test_files=(
        "tests/workflows/test-all-workflows-local.sh"
        "tests/workflows/test-daily-evolution-local.sh"
        "tests/workflows/test-workflow.sh"
        "tests/seed/test-evolved-seed.sh"
        "tests/lib/test-modular-library.sh"
    )
    
    for test_file in "${test_files[@]}"; do
        if [ -f "$test_file" ]; then
            log_success "Found: $test_file"
        else
            log_warning "Missing: $test_file"
        fi
    done
    
    # Run test migration validation if available
    if [ -f "tests/validate-test-migration.sh" ]; then
        log_info "Running test migration validation..."
        if ./tests/validate-test-migration.sh; then
            log_success "Test migration validation passed"
        else
            log_warning "Test migration validation issues detected"
        fi
    fi
fi

# Step 5: Initialize modular library system
log_info "Step 5: Modular library system initialization"

if [ -f "src/lib/core/bootstrap.sh" ]; then
    log_info "Testing modular library bootstrap..."
    if source src/lib/core/bootstrap.sh && bootstrap_library; then
        log_success "Modular library system initialized"
    else
        log_warning "Modular library system needs setup"
    fi
else
    log_warning "Modular library system not found - consider implementing"
fi

# Step 6: GitHub integration setup
log_info "Step 6: GitHub integration setup"

if command -v gh &> /dev/null; then
    if gh auth status &> /dev/null; then
        log_success "GitHub CLI authenticated"
        
        # Check if we have a remote origin
        if git remote get-url origin &> /dev/null; then
            log_success "GitHub remote configured"
        else
            log_warning "No GitHub remote configured - manual setup required"
        fi
    else
        log_warning "GitHub CLI not authenticated - run 'gh auth login'"
    fi
fi

# Step 7: Setup workflow files
log_info "Step 7: Workflow configuration"

workflow_files=(
    ".github/workflows/ai_evolver.yml"
    ".github/workflows/daily_evolution.yml"
    ".github/workflows/testing_automation_evolver.yml"
)

for workflow in "${workflow_files[@]}"; do
    if [ -f "$workflow" ]; then
        log_success "Found workflow: $(basename "$workflow")"
    else
        log_warning "Missing workflow: $(basename "$workflow")"
    fi
done

# Step 8: Version management
log_info "Step 8: Version management setup"

if [ -f ".version-config.json" ]; then
    log_success "Version configuration found"
else
    log_info "Creating version configuration..."
    cat > .version-config.json << 'EOF'
{
  "currentVersion": "0.4.1",
  "trackedFiles": [
    "README.md",
    "init_setup.sh",
    ".github/workflows/ai_evolver.yml",
    ".seed.md",
    "seed_prompt.md"
  ],
  "evolutionHistory": [],
  "lastEvolution": null
}
EOF
    log_success "Version configuration created"
fi

# Step 9: Final validation and summary
log_info "Step 9: Final validation"

echo ""
echo "🎉 Initialization Summary"
echo "========================"
echo -e "✅ Environment: ${GREEN}Ready${NC}"
echo -e "✅ Directory structure: ${GREEN}Organized${NC}"
echo -e "✅ Script permissions: ${GREEN}Configured${NC}"
echo -e "✅ Test framework: ${GREEN}Reorganized${NC}"
echo -e "✅ Modular library: ${GREEN}Available${NC}"
echo -e "✅ Version management: ${GREEN}Configured${NC}"

echo ""
echo "🚀 Next Steps:"
echo "=============="
echo "1. Run comprehensive workflow tests:"
echo "   ./tests/workflows/test-all-workflows-local.sh"
echo ""
echo "2. Test the seed evolution functionality:"
echo "   ./tests/seed/test-evolved-seed.sh"
echo ""
echo "3. Validate the modular library system:"
echo "   ./tests/lib/test-modular-library.sh"
echo ""
echo "4. Trigger your first evolution:"
echo "   gh workflow run ai_evolver.yml -f prompt='Your enhancement idea'"
echo ""
echo "5. Monitor evolution with:"
echo "   ./scripts/analyze-repository-health.sh"

echo ""
log_success "AI Evolution Engine Seed initialized successfully!"
log_info "Ready to evolve! 🌱➡️🌳"
