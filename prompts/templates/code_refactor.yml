#
# @file prompts/templates/code_refactor.yml
# @description Code quality and refactoring prompt for improving maintainability
# @author AI Evolution Engine <ai-evolution@engine.dev>
# @created 2025-07-12
# @lastModified 2025-07-12
# @version 2.0.0
#
# @relatedIssues 
#   - #prompt-standardization: Standardize prompt format across repository
#   - #TBD: Code quality and maintainability improvements
#
# @relatedEvolutions
#   - v2.0.0: Converted to standardized YAML format
#   - v1.0.0: Initial periodic prompt implementation
#
# @dependencies
#   - AI Evolution Engine: >=0.4.3
#   - YAML parser for prompt processing
#
# @changelog
#   - 2025-07-12: Converted to standardized YAML format - ITJ
#   - 2025-07-12: Initial creation of code refactoring prompt - AEE
#
# @usage Executed monthly via GitHub Actions workflow for code quality maintenance
# @notes Part of the periodic AI prompts system for repository evolution
#

name: Code Quality Refactoring
description: Improves code readability, maintainability, and adherence to best practices without altering functionality
model: gpt-4o-mini
modelParameters:
  temperature: 0.2
  max_tokens: 4000
messages:
  - role: system
    content: |
      You are an expert software engineer specializing in code quality and refactoring. Your task is to analyze all source code files in this repository and improve their quality while maintaining backward compatibility and functionality.
      
      **Refactoring Principles:**
      - **Backward Compatibility**: Ensure all changes maintain existing functionality
      - **DRY Principle**: Eliminate code duplication
      - **KISS Principle**: Keep solutions simple and understandable
      - **Test Coverage**: Generate tests for refactored code
      - **Documentation**: Update code documentation to reflect changes
      
      **Quality Standards:**
      - **Python**: Follow PEP8 guidelines, use type hints where appropriate
      - **JavaScript**: Follow ESLint rules, use modern ES6+ features appropriately
      - **Shell Scripts**: Follow POSIX standards, add proper error checking
      - **General**: Follow language-specific conventions and community standards
  - role: user
    content: |
      Analyze and refactor the source code files for improved quality and maintainability:
      
      **Source Code Files:**
      {{source_files}}
      
      **Refactoring Objectives:**
      
      1. **Readability Improvements**
         - Consistent Naming: Use clear, descriptive names for variables, functions, and classes
         - Code Comments: Add meaningful comments for complex logic
         - Code Structure: Organize code logically with appropriate spacing and indentation
         - Magic Numbers: Replace magic numbers with named constants
      
      2. **Maintainability Enhancements**
         - Function Modularity: Break down large functions into smaller, focused units
         - Code Duplication: Identify and eliminate duplicate code patterns
         - Error Handling: Improve error handling and exception management
         - Configuration: Extract hardcoded values to configuration files
      
      3. **Best Practices Adherence**
         - Follow language-specific guidelines and conventions
         - Implement proper error checking and validation
         - Use appropriate design patterns and architectural principles
         - Ensure consistent coding style across the codebase
      
      4. **Performance Considerations**
         - Algorithm Efficiency: Identify and improve inefficient algorithms
         - Memory Usage: Optimize memory allocation and cleanup
         - I/O Operations: Improve file and network operation efficiency
         - Caching: Add appropriate caching where beneficial
      
      **Analysis Requirements:**
      - Identify code smells and anti-patterns
      - Suggest specific improvements with rationale
      - Prioritize changes by impact and effort
      - Ensure backward compatibility is maintained
      
      **Testing Requirements:**
      Generate comprehensive unit tests for all refactored code including:
      - Function input/output validation
      - Edge case handling
      - Error condition testing
      - Integration testing where applicable
      
      Provide a detailed refactoring plan with prioritized improvements and implementation details.
testData:
  - input: |
      source_files: "src/calculator.py, src/utils.js, scripts/deploy.sh"
    expected: |
      {
        "refactoring_analysis": {
          "files_analyzed": 3,
          "issues_identified": 8,
          "complexity_reduction": "25%",
          "maintainability_score": "improved"
        },
        "improvements": [
          {
            "file": "src/calculator.py",
            "type": "function_extraction",
            "description": "Extract complex calculation logic into smaller methods",
            "priority": "high",
            "effort": "medium"
          }
        ],
        "testing_plan": {
          "new_tests": 5,
          "coverage_improvement": "15%",
          "test_types": ["unit", "integration"]
        }
      }
evaluators:
  - name: Output should be valid JSON
    json:
      validJson: true
  - name: Should include refactoring analysis
    json:
      hasKey: "refactoring_analysis"
  - name: Should provide improvements list
    json:
      hasKey: "improvements"
  - name: Should include testing plan
    json:
      hasKey: "testing_plan"
  - name: Files analyzed should be number
    json:
      path: "refactoring_analysis.files_analyzed"
      type: "number"
  - name: Should specify improvement priority
    json:
      path: "improvements[0].priority"
      enum: ["low", "medium", "high", "critical"]
