#
# @file prompts/first_growth.yml
# @description Initial growth prompt for starting evolution cycles with Idea Incubator feature
# @author IT-Journey Team <team@it-journey.org>
# @created 2025-07-12
# @lastModified 2025-07-12
# @version 2.0.0
#
# @relatedIssues 
#   - #prompt-standardization: Standardize prompt format across repository
#   - #idea-incubator: Implement Idea Incubator feature
#
# @relatedEvolutions
#   - v2.0.0: Converted to standardized YAML format
#   - v0.2.0: Original seed prompt implementation
#
# @dependencies
#   - AI Evolution Engine: >=0.4.3
#   - Python: >=3.8 for implementation
#
# @changelog
#   - 2025-07-12: Converted to standardized YAML format - ITJ
#   - 2025-07-05: Original implementation as markdown prompt - ITJ
#
# @usage Initial prompt for AI-driven repository evolution
# @notes Guides the AI through implementing basic features with testing and documentation
#

name: First Growth - Idea Incubator
description: Guides the evolution of this nascent AI-driven repository to include a simple "Idea Incubator" feature
model: gpt-4o-mini
modelParameters:
  temperature: 0.4
  max_tokens: 4000
messages:
  - role: system
    content: |
      You are an AI evolution agent specializing in repository development and feature implementation. Your mission is to guide the evolution of this AI-driven repository by implementing new features while following software development best practices.
      
      **Growth Principles to Emphasize:**
      - **Modularity**: Keep logic separate and well-organized
      - **Testability**: Ensure all new code is testable
      - **Clarity**: Code should be clear and well-commented where necessary
      - **Documentation**: Update documentation to reflect new capabilities
      - **Best Practices**: Follow established patterns and conventions
  - role: user
    content: |
      Implement an "Idea Incubator" feature for this repository with the following specifications:
      
      **Core Requirements:**
      {{feature_requirements}}
      
      **Implementation Specifications:**
      
      1. **Core Logic (src/idea_incubator.py or similar):**
         - A Python class or set of functions to manage a list of ideas
         - Each idea should have a description (string) and a status (e.g., "pending", "active", "completed", "archived")
         - Ability to add a new idea
         - Ability to list all ideas
         - Ability to update an idea's status
      
      2. **Basic CLI Interaction (Optional, if easy for AI):**
         - A simple way to interact with the Idea Incubator from the command line
         - Example: `python main.py add "My new idea"`
      
      3. **Tests (tests/test_idea_incubator.py):**
         - Basic unit tests for adding, listing, and updating ideas
         - Test edge cases and error conditions
         - Ensure good test coverage
      
      4. **Documentation:**
         - Update README.md with a new section describing the "Idea Incubator" feature
         - Brief comments in the code
         - Usage examples and API documentation
      
      Remember: The AI is currently simulated in ai_evolver.yml. Its actions will be based on the simulation logic in that workflow. The changes it makes (like creating files and updating README/metrics) are defined there.
      
      Provide your implementation plan and code changes in a structured format.
testData:
  - input: |
      feature_requirements: "Implement a simple idea management system with CRUD operations and CLI interface"
    expected: |
      {
        "implementation_plan": {
          "files_to_create": ["src/idea_incubator.py", "tests/test_idea_incubator.py", "main.py"],
          "files_to_update": ["README.md"],
          "features": ["add_idea", "list_ideas", "update_status", "cli_interface"]
        },
        "code_structure": {
          "classes": ["IdeaIncubator"],
          "methods": ["add_idea", "list_ideas", "update_idea_status"],
          "test_coverage": "90%"
        }
      }
evaluators:
  - name: Output should be valid JSON
    json:
      validJson: true
  - name: Should include implementation plan
    json:
      hasKey: "implementation_plan"
  - name: Should specify files to create
    json:
      hasKey: "implementation_plan.files_to_create"
  - name: Should include code structure
    json:
      hasKey: "code_structure"
  - name: Should specify test coverage
    json:
      hasKey: "code_structure.test_coverage"
