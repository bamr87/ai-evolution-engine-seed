name: 🔄 Periodic AI Evolution Engine (v0.4.7)

on:
  # Weekly schedules
  schedule:
    # Documentation harmonization - Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
    # Security scan - Wednesdays at 3 AM UTC  
    - cron: '0 3 * * 3'
    # Changelog versioning - Fridays at 4 AM UTC
    - cron: '0 4 * * 5'
    # Test enhancement - Tuesdays at 2 AM UTC (bi-weekly)
    - cron: '0 2 * * 2'
    # Monthly prompts - Various days of month
    - cron: '0 1 1 * *'   # Code refactor - 1st
    - cron: '0 2 15 * *'  # Dependency updates - 15th
    - cron: '0 3 8 * *'   # Performance optimization - 8th
    - cron: '0 4 22 * *'  # Workflow optimization - 22nd
    - cron: '0 5 28 * *'  # Community guidelines - 28th
    - cron: '0 6 30 * *'  # Prompt refinement - 30th

  # Manual trigger for testing and on-demand execution
  workflow_dispatch:
    inputs:
      prompt_name:
        description: 'Specific prompt to execute (leave empty for schedule-based selection)'
        required: false
        type: choice
        options:
          - 'none'
          - doc_harmonization
          - security_scan
          - changelog_versioning
          - test_enhancement
          - code_refactor
          - dependency_updates
          - performance_optimization
          - workflow_optimization
          - community_guidelines
          - prompt_refinement
      dry_run:
        description: 'Run in simulation mode without making actual changes'
        required: false
        default: true
        type: boolean
      force_execution:
        description: 'Force execution even if conditions suggest skipping'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

env:
  EVOLUTION_VERSION: "0.4.7"
  WORKFLOW_TYPE: "periodic_evolution"
  CI_ENVIRONMENT: "true"
  GITHUB_WORKSPACE: ${{ github.workspace }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  determine-prompt:
    name: 🎯 Determine Prompt to Execute
    runs-on: ubuntu-latest
    outputs:
      prompt_name: ${{ steps.select.outputs.prompt_name }}
      should_execute: ${{ steps.select.outputs.should_execute }}
      execution_mode: ${{ steps.select.outputs.execution_mode }}
    
    steps:
      - name: 🌱 Initialize Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Select Prompt Based on Schedule
        id: select
        run: |
          # Manual trigger takes precedence
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.prompt_name }}" ]]; then
            echo "prompt_name=${{ github.event.inputs.prompt_name }}" >> $GITHUB_OUTPUT
            echo "should_execute=true" >> $GITHUB_OUTPUT
            echo "execution_mode=manual" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine prompt based on current time and schedule
          current_hour=$(date -u +%H)
          current_day=$(date -u +%d)
          current_weekday=$(date -u +%u)  # 1=Monday, 7=Sunday
          current_week=$(date -u +%V)
          
          prompt_name=""
          should_execute="false"
          
          case "$current_weekday" in
            1) # Monday
              if [[ "$current_hour" == "02" ]]; then
                prompt_name="doc_harmonization"
                should_execute="true"
              fi
              ;;
            2) # Tuesday  
              if [[ "$current_hour" == "02" ]] && [[ $((current_week % 2)) == 0 ]]; then
                prompt_name="test_enhancement"
                should_execute="true"
              fi
              ;;
            3) # Wednesday
              if [[ "$current_hour" == "03" ]]; then
                prompt_name="security_scan"
                should_execute="true"
              fi
              ;;
            5) # Friday
              if [[ "$current_hour" == "04" ]]; then
                prompt_name="changelog_versioning"
                should_execute="true"
              fi
              ;;
          esac
          
          # Monthly prompts
          case "$current_day" in
            01)
              if [[ "$current_hour" == "01" ]]; then
                prompt_name="code_refactor"
                should_execute="true"
              fi
              ;;
            08)
              if [[ "$current_hour" == "03" ]]; then
                prompt_name="performance_optimization"
                should_execute="true"
              fi
              ;;
            15)
              if [[ "$current_hour" == "02" ]]; then
                prompt_name="dependency_updates"
                should_execute="true"
              fi
              ;;
            22)
              if [[ "$current_hour" == "04" ]]; then
                prompt_name="workflow_optimization"
                should_execute="true"
              fi
              ;;
            28)
              if [[ "$current_hour" == "05" ]]; then
                prompt_name="community_guidelines"
                should_execute="true"
              fi
              ;;
            30)
              if [[ "$current_hour" == "06" ]]; then
                prompt_name="prompt_refinement"
                should_execute="true"
              fi
              ;;
          esac
          
          # Force execution if specified
          if [[ "${{ github.event.inputs.force_execution }}" == "true" ]]; then
            should_execute="true"
          fi
          
          echo "prompt_name=$prompt_name" >> $GITHUB_OUTPUT
          echo "should_execute=$should_execute" >> $GITHUB_OUTPUT
          echo "execution_mode=scheduled" >> $GITHUB_OUTPUT
          
          echo "🎯 Selected prompt: $prompt_name"
          echo "🔄 Should execute: $should_execute"

      - name: 📋 Collect Prompt Selection Errors & Warnings
        if: always()
        id: error_collection
        run: |
          # Simple error collection for prompt determination job
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "📊 Prompt selection completed successfully"
            echo "Selected: ${{ steps.select.outputs.prompt_name || 'none' }}"
            echo "Should execute: ${{ steps.select.outputs.should_execute || 'false' }}"
          else
            echo "❌ Prompt selection failed"
            echo "Job status: ${{ job.status }}"
          fi

  execute-periodic-evolution:
    name: 🌿 Execute Periodic Evolution
    runs-on: ubuntu-latest
    needs: determine-prompt
    if: needs.determine-prompt.outputs.should_execute == 'true'
    
    steps:
      - name: 🌱 Initialize Evolution Environment
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🛠️ Setup Evolution Prerequisites
        run: |
          chmod +x ./scripts/setup-environment.sh
          ./scripts/setup-environment.sh
        env:
          EVOLUTION_TYPE: "periodic"
          PROMPT_NAME: ${{ needs.determine-prompt.outputs.prompt_name }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}

      - name: 🔍 Validate Prompt Template
        run: |
          prompt_path="prompts/templates/${{ needs.determine-prompt.outputs.prompt_name }}.md"
          if [[ ! -f "$prompt_path" ]]; then
            echo "❌ Prompt template not found: $prompt_path"
            exit 1
          fi
          echo "✅ Prompt template found: $prompt_path"
          
          # Validate prompt structure
          if ! grep -q "## AI Instructions" "$prompt_path"; then
            echo "❌ Invalid prompt template: Missing AI Instructions section"
            exit 1
          fi
          echo "✅ Prompt template structure validated"

      - name: 🔍 Pre-Evolution Health Check
        run: |
          chmod +x ./scripts/check-prereqs.sh
          ./scripts/check-prereqs.sh \
            --evolution-type "periodic" \
            --prompt-name "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --dry-run "${{ github.event.inputs.dry_run || 'true' }}"

      - name: 📊 Evolution Cycle Tracking
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh start \
            --type "periodic" \
            --prompt "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --execution-mode "${{ needs.determine-prompt.outputs.execution_mode }}"

      - name: 🧠 Context Collection for Periodic Evolution
        run: |
          chmod +x ./scripts/collect-context.sh
          ./scripts/collect-context.sh \
            --prompt-template "prompts/templates/${{ needs.determine-prompt.outputs.prompt_name }}.md" \
            --evolution-type "periodic" \
            --include-health \
            --include-metrics

      - name: 🚀 Execute Periodic AI Prompt
        run: |
          chmod +x ./scripts/execute-periodic-prompt.sh
          ./scripts/execute-periodic-prompt.sh \
            --prompt-name "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --dry-run "${{ github.event.inputs.dry_run || 'true' }}" \
            --execution-mode "${{ needs.determine-prompt.outputs.execution_mode }}"

      - name: 🔄 Apply Evolution Changes
        if: github.event.inputs.dry_run != 'true'
        run: |
          chmod +x ./scripts/apply-periodic-changes.sh
          ./scripts/apply-periodic-changes.sh \
            --prompt-name "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --create-pr "true"

      - name: 🧪 Validate Evolution Results
        run: |
          chmod +x ./scripts/validate-evolution.sh
          ./scripts/validate-evolution.sh \
            --type "periodic" \
            --prompt "${{ needs.determine-prompt.outputs.prompt_name }}"

      - name: 📈 Evolution Metrics Collection
        run: |
          chmod +x ./scripts/collect-evolution-metrics.sh
          ./scripts/collect-evolution-metrics.sh \
            --prompt-name "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --execution-mode "${{ needs.determine-prompt.outputs.execution_mode }}"

      - name: 📋 Create Evolution Pull Request
        if: github.event.inputs.dry_run != 'true'
        run: |
          chmod +x ./scripts/create_pr.sh
          ./scripts/create_pr.sh \
            --prompt "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --type "periodic_evolution" \
            --execution-mode "${{ needs.determine-prompt.outputs.execution_mode }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Final Evolution Tracking
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh complete \
            --prompt "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --type "periodic"

      - name: 🔔 Evolution Notification
        if: always()
        run: |
          chmod +x ./scripts/send-evolution-notification.sh
          ./scripts/send-evolution-notification.sh \
            --prompt-name "${{ needs.determine-prompt.outputs.prompt_name }}" \
            --status "${{ job.status }}" \
            --execution-mode "${{ needs.determine-prompt.outputs.execution_mode }}"

      - name: 📋 Collect Workflow Errors & Warnings
        if: always()
        id: error_collection
        run: |
          chmod +x ./scripts/collect-workflow-errors.sh
          ./scripts/collect-workflow-errors.sh \
            --workflow-type "periodic_evolution" \
            --job-status "${{ job.status }}" \
            --collect-from-logs \
            --include-context

  skip-execution:
    name: ⏭️ Skip Evolution (No Prompt Scheduled)
    runs-on: ubuntu-latest
    needs: determine-prompt
    if: needs.determine-prompt.outputs.should_execute != 'true'
    
    steps:
      - name: 📝 Log Skip Reason
        run: |
          echo "⏭️ Skipping periodic evolution"
          echo "📅 Current time does not match any scheduled prompt execution"
          echo "🎯 Determined prompt: ${{ needs.determine-prompt.outputs.prompt_name }}"
          echo "🔄 Should execute: ${{ needs.determine-prompt.outputs.should_execute }}"

      - name: 📋 Collect Workflow Errors & Warnings
        if: always()
        id: error_collection
        run: |
          # For the skip-execution job, we don't have the full repository checkout
          # So we'll create a minimal error summary
          echo "📊 Workflow Summary: Periodic evolution skipped (no prompt scheduled)"
          echo "Status: success (intentionally skipped)"
          echo "Reason: No scheduled prompt matches current time"
