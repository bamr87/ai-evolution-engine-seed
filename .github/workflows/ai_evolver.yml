name: üå± AI Evolution Growth Engine (v0.4.5)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Growth instructions for the AI (leave empty for changelog/versioning update)'
        required: false
        type: string
      growth_mode:
        description: 'Growth strategy (conservative, adaptive, experimental)'
        required: false
        default: 'adaptive'
        type: choice
        options:
          - conservative
          - adaptive
          - experimental
          - test-automation
      auto_plant_seeds:
        description: 'Automatically commit the newly generated .seed.md for next evolution?'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Run in simulation mode without making actual changes'
        required: false
        default: false
        type: boolean
      use_container:
        description: 'Run in containerized environment (recommended for CI)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  EVOLUTION_VERSION: "0.4.5"
  WORKFLOW_TYPE: "manual_evolution"
  # Set environment context for cross-compatibility
  CI_ENVIRONMENT: "true"
  GITHUB_WORKSPACE: ${{ github.workspace }}
  # GitHub authentication for CLI operations
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  evolve:
    name: üåø Growth Cycle v0.4.5
    runs-on: ubuntu-latest
    
    steps:
      - name: üå± Initialize Evolution Environment
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üõ†Ô∏è Setup Evolution Prerequisites  
        run: |
          chmod +x ./scripts/setup-environment.sh
          ./scripts/setup-environment.sh
        env:
          EVOLUTION_TYPE: "manual"
          GROWTH_MODE: ${{ github.event.inputs.growth_mode }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}

      - name: üìù Determine Evolution Prompt
        id: prompt-selection
        run: |
          if [ -z "${{ github.event.inputs.prompt }}" ]; then
            echo "No custom prompt provided, using changelog versioning prompt"
            if [ -f "prompts/templates/changelog_versioning.md" ]; then
              EVOLUTION_PROMPT=$(cat prompts/templates/changelog_versioning.md)
              echo "prompt_source=changelog_versioning" >> $GITHUB_OUTPUT
            else
              EVOLUTION_PROMPT="Analyze recent commits and update CHANGELOG.md with proper semantic versioning. Review git history since the last release, categorize changes (Added, Changed, Fixed, etc.), and recommend appropriate version increment following semantic versioning principles."
              echo "prompt_source=fallback" >> $GITHUB_OUTPUT
            fi
          else
            EVOLUTION_PROMPT="${{ github.event.inputs.prompt }}"
            echo "prompt_source=user_input" >> $GITHUB_OUTPUT
          fi
          
          # Store the prompt in environment for later steps
          echo "EVOLUTION_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$EVOLUTION_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Selected prompt source: $(echo $EVOLUTION_PROMPT | head -c 100)..."

      - name: üîç Pre-Evolution Validation
        run: |
          chmod +x ./scripts/check-prereqs.sh
          ./scripts/check-prereqs.sh \
            --growth-mode "${{ github.event.inputs.growth_mode }}" \
            --dry-run "${{ github.event.inputs.dry_run }}"

      - name: ÔøΩ Version Management Pre-Process
        run: |
          chmod +x ./scripts/version-integration.sh
          ./scripts/version-integration.sh prepare
        env:
          GROWTH_MODE: ${{ github.event.inputs.growth_mode }}

      - name: üè∑Ô∏è Evolution Cycle Tracking
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh start \
            --type "manual" \
            --mode "${{ github.event.inputs.growth_mode }}" \
            --prompt "$EVOLUTION_PROMPT"

      - name: üß† Context Collection & Analysis
        run: |
          chmod +x ./scripts/collect-context.sh
          echo "üîç Debug: .gptignore content:"
          if [[ -f .gptignore ]]; then
            cat .gptignore
          else
            echo "No .gptignore file found"
          fi
          echo "üîç Debug: Starting context collection..."
          echo "üîç Debug: Current working directory: $(pwd)"
          echo "üîç Debug: Available files: $(find . -name "*.md" -o -name "*.sh" 2>/dev/null | head -5 || echo 'none found')"
          echo "üîç Debug: Required tools check:"
          command -v jq >/dev/null && echo "‚úÖ jq available" || echo "‚ùå jq missing"
          command -v find >/dev/null && echo "‚úÖ find available" || echo "‚ùå find missing"
          command -v timeout >/dev/null && echo "‚úÖ timeout available" || echo "‚ùå timeout missing"
          
          # Run context collection with enhanced error handling and timeout protection
          timeout 300 ./scripts/collect-context.sh \
            --prompt "$EVOLUTION_PROMPT" \
            --growth-mode "${{ github.event.inputs.growth_mode }}" \
            --include-health \
            --include-tests || {
              echo "‚ùå Context collection failed with exit code $?"
              echo "üîç Debug: Checking if context file was partially created..."
              if [[ -f /tmp/repo_context.json ]]; then
                echo "üìÅ Partial context file exists, size: $(wc -c < /tmp/repo_context.json) bytes"
                echo "üìã Context file structure:"
                jq 'keys' /tmp/repo_context.json 2>/dev/null || echo "Invalid JSON in context file"
                echo "üìÑ Context file first few lines:"
                head -20 /tmp/repo_context.json || echo "Cannot read context file"
              else
                echo "üìÅ No context file found at /tmp/repo_context.json"
                echo "üìÑ Contents of /tmp:"
                ls -la /tmp/ | grep -E "(repo|context)" || echo "No related files found"
              fi
              echo "üîç Debug: Checking script dependencies..."
              echo "üìÅ Project structure:"
              ls -la src/lib/core/ 2>/dev/null || echo "core lib not found"
              echo "üîç Debug: Recent system messages:"
              dmesg | tail -10 2>/dev/null || echo "Cannot access dmesg"
              exit 1
            }
          
          echo "‚úÖ Context collection completed successfully"
          if [[ -f /tmp/repo_context.json ]]; then
            echo "üìä Context file size: $(wc -c < /tmp/repo_context.json) bytes"
            echo "üìä Files collected: $(jq '.metadata.collection_summary.files_collected // 0' /tmp/repo_context.json)"
          fi

      - name: üöÄ AI Growth Simulation
        run: |
          chmod +x ./scripts/simulate-ai-growth.sh
          ./scripts/simulate-ai-growth.sh \
            --prompt "$EVOLUTION_PROMPT" \
            --growth-mode "${{ github.event.inputs.growth_mode }}" \
            --dry-run "${{ github.event.inputs.dry_run }}"

      - name: üîÑ Apply Growth Changes
        if: github.event.inputs.dry_run == 'false'
        run: |
          chmod +x ./scripts/apply-growth-changes.sh
          ./scripts/apply-growth-changes.sh \
            --growth-mode "${{ github.event.inputs.growth_mode }}" \
            --auto-plant "${{ github.event.inputs.auto_plant_seeds }}"

      - name: üìà Post-Evolution Tracking
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh complete \
            --mode "${{ github.event.inputs.growth_mode }}"

      - name: ÔøΩ Version Integration Post-Process
        run: |
          chmod +x ./scripts/version-integration.sh
          ./scripts/version-integration.sh finalize
        env:
          GROWTH_MODE: ${{ github.event.inputs.growth_mode }}

      - name: üß™ Validate Evolution with Test Framework
        run: |
          echo "Running test framework validation..."
          chmod +x ./tests/workflows/test-all-workflows-local.sh
          ./tests/workflows/test-all-workflows-local.sh

      - name: üß™ Test Evolved Components
        run: |
          echo "Testing evolved seed functionality..."
          chmod +x ./tests/seed/test-evolved-seed.sh
          ./tests/seed/test-evolved-seed.sh "${{ github.event.inputs.growth_mode }}"

      - name: üìù Evolution Version Update
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh version-bump
        env:
          GROWTH_MODE: ${{ github.event.inputs.growth_mode }}

      - name: ÔøΩ Generate New Evolution Seeds
        if: github.event.inputs.auto_plant_seeds == 'true'
        run: |
          chmod +x ./scripts/generate_seed.sh
          ./scripts/generate_seed.sh \
            --cycle "$(date +%Y%m%d)" \
            --generation "1" \
            --prompt "$EVOLUTION_PROMPT" \
            --growth-mode "${{ github.event.inputs.growth_mode }}"

      - name: üåø Plant New Seeds in Repository
        if: github.event.inputs.auto_plant_seeds == 'true'
        run: |
          chmod +x ./scripts/plant-new-seeds.sh
          ./scripts/plant-new-seeds.sh

      - name: ü§ñ Generate AI Evolution Response
        run: |
          chmod +x ./scripts/generate_ai_response.sh
          ./scripts/generate_ai_response.sh \
            --prompt "$EVOLUTION_PROMPT" \
            --mode "${{ github.event.inputs.growth_mode }}" \
            --dry-run "${{ github.event.inputs.dry_run }}"

      - name: üìã Create Evolution Pull Request
        if: github.event.inputs.dry_run == 'false'
        run: |
          chmod +x ./scripts/create_pr.sh
          ./scripts/create_pr.sh \
            --prompt "$EVOLUTION_PROMPT" \
            --mode "${{ github.event.inputs.growth_mode }}" \
            --type "manual_evolution"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Final Evolution Tracking
        run: |
          chmod +x ./scripts/version-tracker.sh
          ./scripts/version-tracker.sh log \
            --final \
            --mode "${{ github.event.inputs.growth_mode }}"
