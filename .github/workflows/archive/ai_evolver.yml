name: üå± AI Evolution Growth Engine (v0.4.8)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Growth instructions for the AI (leave empty for changelog/versioning update)'
        required: false
        type: string
      growth_mode:
        description: 'Growth strategy (conservative, adaptive, experimental)'
        required: false
        default: 'adaptive'
        type: choice
        options:
          - conservative
          - adaptive
          - experimental
          - test-automation
      auto_plant_seeds:
        description: 'Automatically commit the newly generated .seed.md for next evolution?'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Run in simulation mode without making actual changes'
        required: false
        default: false
        type: boolean
      use_container:
        description: 'Run in containerized environment (recommended for CI)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  EVOLUTION_VERSION: "0.4.8"
  WORKFLOW_TYPE: "manual_evolution"
  CI_ENVIRONMENT: "true"
  GITHUB_WORKSPACE: ${{ github.workspace }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  evolve:
    name: üåø Growth Cycle v0.4.8
    runs-on: ubuntu-latest
    
    steps:
      - name: üå± Initialize Evolution Environment
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üõ†Ô∏è Setup Evolution Prerequisites  
        run: |
          sudo apt-get update -qq
          # Install core utilities - timeout is part of coreutils, not a separate package
          sudo apt-get install -y -qq jq tree curl git coreutils findutils grep
          
          # Verify timeout command is available (part of coreutils)
          if ! command -v timeout >/dev/null 2>&1; then
            echo "‚ùå timeout command not available"
            exit 1
          else
            echo "‚úÖ timeout command available"
          fi
          
          if [[ -f "./scripts/setup-environment.sh" ]]; then
            chmod +x ./scripts/setup-environment.sh
            ./scripts/setup-environment.sh || echo "Setup completed with warnings"
          else
            echo "‚ö†Ô∏è Setup script not found, using minimal setup"
          fi
        env:
          EVOLUTION_TYPE: "manual"
          GROWTH_MODE: ${{ github.event.inputs.growth_mode }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}

      - name: üìù Determine Evolution Prompt
        id: prompt-selection
        run: |
          if [ -z "${{ github.event.inputs.prompt }}" ]; then
            EVOLUTION_PROMPT="Analyze recent commits and update CHANGELOG.md with proper semantic versioning."
          else
            EVOLUTION_PROMPT="${{ github.event.inputs.prompt }}"
          fi
          
          echo "EVOLUTION_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$EVOLUTION_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üîç Pre-Evolution Validation
        run: |
          if [[ -f "./scripts/check-prereqs.sh" ]]; then
            chmod +x ./scripts/check-prereqs.sh
            ./scripts/check-prereqs.sh --growth-mode "${{ github.event.inputs.growth_mode }}" || echo "Validation completed with warnings"
          else
            echo "‚ö†Ô∏è Prerequisite check script not found"
          fi

      - name: üß† Context Collection & Analysis
        run: |
          echo "üîç Starting context collection..."
          
          # Create minimal context fallback
          cat > /tmp/repo_context.json << 'EOF'
          {
            "metadata": {
              "collection_summary": {
                "files_collected": 0,
                "status": "minimal_fallback"
              }
            },
            "current_metrics": {
              "growth_cycles": 0,
              "current_generation": 0
            }
          }
          EOF
          
          CONTEXT_SUCCESS=false
          
          # Try to run actual context collection with multiple fallback strategies
          if [[ -f "./scripts/collect-context.sh" ]]; then
            chmod +x ./scripts/collect-context.sh
            echo "üìä Running primary context collection..."
            
            # Use simple timeout command with better error handling
            if timeout 90 bash -x ./scripts/collect-context.sh \
                --prompt "$EVOLUTION_PROMPT" \
                --growth-mode "${{ github.event.inputs.growth_mode }}" \
                --ci-mode 2>&1; then
              echo "‚úÖ Primary context collection completed successfully"
              CONTEXT_SUCCESS=true
            else
              echo "‚ö†Ô∏è Primary context collection failed (exit code: $?), trying simple fallback..."
            fi
          else
            echo "‚ö†Ô∏è Context collection script not found"
          fi
          
          # Try simple context collector if primary failed
          if [[ "$CONTEXT_SUCCESS" == "false" && -f "./scripts/simple-context-collector.sh" ]]; then
            echo "üîÑ Trying simple context collector as fallback..."
            chmod +x ./scripts/simple-context-collector.sh
            
            if timeout 30 bash -x ./scripts/simple-context-collector.sh /tmp/repo_context.json 2>&1; then
              echo "‚úÖ Simple context collection completed successfully"
              CONTEXT_SUCCESS=true
            else
              echo "‚ö†Ô∏è Simple context collection also failed (exit code: $?)"
            fi
          fi
          
          # Ultimate emergency fallback
          if [[ "$CONTEXT_SUCCESS" == "false" && -f "./scripts/emergency-fallback.sh" ]]; then
            echo "üö® Using emergency fallback for context collection..."
            chmod +x ./scripts/emergency-fallback.sh
            
            if ./scripts/emergency-fallback.sh context /tmp/repo_context.json 2>&1; then
              echo "‚úÖ Emergency context collection completed"
              CONTEXT_SUCCESS=true
            else
              echo "‚ö†Ô∏è Even emergency fallback failed, creating manual context"
            fi
          fi
          
          # Verify context file exists and is valid
          if [[ -f /tmp/repo_context.json ]] && jq empty /tmp/repo_context.json 2>/dev/null; then
            echo "‚úÖ Context file is valid JSON"
          else
            echo "‚ö†Ô∏è Creating emergency fallback context"
            cat > /tmp/repo_context.json << 'EOF'
          {
            "metadata": {
              "collection_summary": {
                "files_collected": 0,
                "status": "emergency_fallback"
              }
            },
            "current_metrics": {
              "growth_cycles": 0,
              "current_generation": 0
            }
          }
          EOF
          fi
          
          echo "Context collection phase completed"
          echo "Context status: $(jq -r '.metadata.collection_summary.status' /tmp/repo_context.json 2>/dev/null || echo 'unknown')"

      - name: üöÄ AI Growth Simulation
        run: |
          echo "ü§ñ Starting AI growth simulation..."
          
          SIMULATION_SUCCESS=false
          
          # Try primary AI growth simulation
          if [[ -f "./scripts/simulate-ai-growth.sh" ]]; then
            chmod +x ./scripts/simulate-ai-growth.sh
            echo "üß† Running primary growth simulation..."
            
            # Use simple timeout with better error handling
            if timeout 60 bash -x ./scripts/simulate-ai-growth.sh \
                --prompt "$EVOLUTION_PROMPT" \
                --growth-mode "${{ github.event.inputs.growth_mode }}" \
                --ci-mode 2>&1; then
              echo "‚úÖ Primary AI growth simulation completed successfully"
              SIMULATION_SUCCESS=true
            else
              echo "‚ö†Ô∏è Primary AI growth simulation failed (exit code: $?) or timed out"
            fi
          else
            echo "‚ö†Ô∏è Primary simulation script not found"
          fi
          
          # Try simple AI simulator if primary failed
          if [[ "$SIMULATION_SUCCESS" == "false" && -f "./scripts/simple-ai-simulator.sh" ]]; then
            echo "üîÑ Trying simple AI simulator as fallback..."
            chmod +x ./scripts/simple-ai-simulator.sh
            
            if timeout 30 bash -x ./scripts/simple-ai-simulator.sh \
                "/tmp/evolution_response.json" \
                "$EVOLUTION_PROMPT" \
                "${{ github.event.inputs.growth_mode }}" 2>&1; then
              echo "‚úÖ Simple AI simulation completed successfully"
              SIMULATION_SUCCESS=true
            else
              echo "‚ö†Ô∏è Simple AI simulation also failed (exit code: $?)"
            fi
          fi
          
          # Ultimate emergency fallback
          if [[ "$SIMULATION_SUCCESS" == "false" && -f "./scripts/emergency-fallback.sh" ]]; then
            echo "üö® Using emergency fallback for AI simulation..."
            chmod +x ./scripts/emergency-fallback.sh
            
            if ./scripts/emergency-fallback.sh simulation /tmp/evolution_response.json 2>&1; then
              echo "‚úÖ Emergency AI simulation completed"
              SIMULATION_SUCCESS=true
            else
              echo "‚ö†Ô∏è Even emergency fallback failed"
            fi
          fi
          
          # Final fallback - create minimal response
          if [[ ! -f /tmp/evolution_response.json ]] || ! jq empty /tmp/evolution_response.json 2>/dev/null; then
            echo "‚ö†Ô∏è Creating emergency AI response"
            cat > /tmp/evolution_response.json << EOF
          {
            "status": "emergency_fallback",
            "message": "Emergency AI response created",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "new_branch": "evolution/emergency-$(date +%Y%m%d-%H%M%S)",
            "changes": [],
            "summary": {
              "files_modified": 0,
              "evolution_type": "emergency_fallback"
            }
          }
          EOF
          fi
          
          # Show simulation summary
          echo "üìã AI simulation summary:"
          if [[ -f /tmp/evolution_response.json ]]; then
            echo "  - Status: $(jq -r '.status // "unknown"' /tmp/evolution_response.json)"
            echo "  - Files to modify: $(jq -r '.changes | length // 0' /tmp/evolution_response.json)"
            echo "  - New branch: $(jq -r '.new_branch // "unknown"' /tmp/evolution_response.json)"
          fi
          
          echo "AI growth simulation phase completed"

      - name: üîÑ Apply Growth Changes
        if: github.event.inputs.dry_run == 'false'
        run: |
          echo "üìù Applying growth changes..."
          
          APPLICATION_SUCCESS=false
          
          # Try primary change application
          if [[ -f "./scripts/apply-growth-changes.sh" ]]; then
            chmod +x ./scripts/apply-growth-changes.sh
            echo "üîß Running primary change application..."
            
            # Use timeout protection with better error handling
            if timeout 45 bash -x ./scripts/apply-growth-changes.sh \
                --growth-mode "${{ github.event.inputs.growth_mode }}" \
                --ci-mode 2>&1; then
              echo "‚úÖ Primary growth changes applied successfully"
              APPLICATION_SUCCESS=true
            else
              echo "‚ö†Ô∏è Primary change application failed (exit code: $?) or timed out"
            fi
          else
            echo "‚ö†Ô∏è Primary change application script not found"
          fi
          
          # Try simple change applier if primary failed
          if [[ "$APPLICATION_SUCCESS" == "false" && -f "./scripts/simple-change-applier.sh" ]]; then
            echo "üîÑ Trying simple change applier as fallback..."
            chmod +x ./scripts/simple-change-applier.sh
            
            if timeout 30 bash -x ./scripts/simple-change-applier.sh /tmp/evolution_response.json 2>&1; then
              echo "‚úÖ Simple change application completed successfully"
              APPLICATION_SUCCESS=true
            else
              echo "‚ö†Ô∏è Simple change application also failed (exit code: $?)"
            fi
          fi
          
          # Final emergency fallback - minimal manual changes
          if [[ "$APPLICATION_SUCCESS" == "false" ]]; then
            echo "üö® All change application methods failed, applying minimal manual changes..."
            
            # Create a simple evolution branch
            EMERGENCY_BRANCH="evolution/emergency-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "$EMERGENCY_BRANCH" || git checkout "$EMERGENCY_BRANCH" || true
            
            # Add a simple changelog entry
            if [[ -f "CHANGELOG.md" ]]; then
              echo "" >> CHANGELOG.md
              echo "## Emergency Evolution - $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "### Changed" >> CHANGELOG.md
              echo "- Emergency evolution cycle completed via GitHub Actions" >> CHANGELOG.md
              echo "- Automated fallback changes applied" >> CHANGELOG.md
              echo "- Growth mode: ${{ github.event.inputs.growth_mode }}" >> CHANGELOG.md
              
              git add CHANGELOG.md
              git commit -m "üö® Emergency evolution cycle - Applied minimal changes due to script failures. Growth mode: ${{ github.event.inputs.growth_mode }}. Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)." || true
              
              echo "‚úÖ Emergency changes applied and committed"
              APPLICATION_SUCCESS=true
            fi
          fi
          
          # Final status
          if [[ "$APPLICATION_SUCCESS" == "true" ]]; then
            echo "‚úÖ Changes applied successfully"
          else
            echo "‚ö†Ô∏è All change application methods failed, but workflow continues"
          fi

      - name: üìà Evolution Tracking
        run: |
          echo "üìä Updating evolution tracking..."
          
          if [[ -f "./scripts/version-tracker.sh" ]]; then
            chmod +x ./scripts/version-tracker.sh
            if timeout 30 ./scripts/version-tracker.sh complete --mode "${{ github.event.inputs.growth_mode }}"; then
              echo "‚úÖ Evolution tracking completed successfully"
            else
              echo "‚ö†Ô∏è Evolution tracking timed out or failed"
              echo "Tracking completed with warnings"
            fi
          else
            echo "‚ö†Ô∏è Version tracker script not found"
            # Simple fallback tracking
            echo "üìù Creating simple tracking entry..."
            if [[ -f "evolution-metrics.json" ]]; then
              jq --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                 --arg mode "${{ github.event.inputs.growth_mode }}" \
                 '.last_evolution = $timestamp | .growth_mode = $mode' \
                 evolution-metrics.json > evolution-metrics.json.tmp && \
                 mv evolution-metrics.json.tmp evolution-metrics.json
            fi
          fi

      - name: üß™ Test Framework Validation
        run: |
          echo "üß™ Running test framework validation..."
          
          if [[ -f "./tests/workflows/test-all-workflows-local.sh" ]]; then
            chmod +x ./tests/workflows/test-all-workflows-local.sh
            if timeout 60 ./tests/workflows/test-all-workflows-local.sh; then
              echo "‚úÖ Test framework validation completed successfully"
            else
              echo "‚ö†Ô∏è Test framework validation timed out or failed"
              echo "Tests completed with warnings"
            fi
          else
            echo "‚ö†Ô∏è Test framework not found"
            echo "üîç Basic validation: checking key files exist..."
            
            # Simple validation
            VALIDATION_ERRORS=0
            
            if [[ ! -f "README.md" ]]; then
              echo "‚ùå README.md not found"
              ((VALIDATION_ERRORS++))
            fi
            
            if [[ ! -f ".github/workflows/ai_evolver.yml" ]]; then
              echo "‚ùå Main workflow file not found"
              ((VALIDATION_ERRORS++))
            fi
            
            if [[ $VALIDATION_ERRORS -eq 0 ]]; then
              echo "‚úÖ Basic validation passed"
            else
              echo "‚ö†Ô∏è Basic validation found $VALIDATION_ERRORS issues"
            fi
          fi

      - name: üåø Generate Evolution Seeds
        if: github.event.inputs.auto_plant_seeds == 'true'
        run: |
          echo "üå± Generating evolution seeds..."
          
          if [[ -f "./scripts/generate_seed.sh" ]]; then
            chmod +x ./scripts/generate_seed.sh
            if timeout 30 ./scripts/generate_seed.sh \
                --cycle "$(date +%Y%m%d)" \
                --prompt "$EVOLUTION_PROMPT"; then
              echo "‚úÖ Evolution seeds generated successfully"
            else
              echo "‚ö†Ô∏è Seed generation timed out or failed"
              echo "Seed generation completed with warnings"
            fi
          else
            echo "‚ö†Ô∏è Seed generation script not found"
            echo "üå± Creating simple seed file..."
            
            # Simple fallback seed generation
            mkdir -p seeds
            SEED_FILE="seeds/evolution-seed-$(date +%Y%m%d-%H%M%S).md"
            echo "# Evolution Seed" > "$SEED_FILE"
            echo "" >> "$SEED_FILE"
            echo "## Context" >> "$SEED_FILE"
            echo "- Growth Mode: ${{ github.event.inputs.growth_mode }}" >> "$SEED_FILE"
            echo "- Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$SEED_FILE"
            echo "" >> "$SEED_FILE"
            echo "## Next Steps" >> "$SEED_FILE"
            echo "- Review changes applied in this evolution cycle" >> "$SEED_FILE"
            echo "- Consider next growth opportunities" >> "$SEED_FILE"
            echo "- Update documentation as needed" >> "$SEED_FILE"
            echo "‚úÖ Simple seed file created"
          fi

      - name: üìã Create Evolution Pull Request
        if: github.event.inputs.dry_run == 'false'
        run: |
          if [[ -f "./scripts/create_pr.sh" ]]; then
            chmod +x ./scripts/create_pr.sh
            ./scripts/create_pr.sh --prompt "$EVOLUTION_PROMPT" --mode "${{ github.event.inputs.growth_mode }}" || echo "PR creation completed with warnings"
          else
            echo "‚ö†Ô∏è PR creation script not found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Final Evolution Summary
        run: |
          echo "üéâ Evolution cycle v0.4.8 completed!"
          echo "Growth mode: ${{ github.event.inputs.growth_mode }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"
          if [[ -f /tmp/repo_context.json ]]; then
            echo "Context file size: $(wc -c < /tmp/repo_context.json) bytes"
          fi

      - name: üìã Collect Workflow Errors & Warnings
        if: always()
        id: error_collection
        run: |
          chmod +x ./scripts/collect-workflow-errors.sh
          ./scripts/collect-workflow-errors.sh \
            --workflow-type "ai_evolver" \
            --job-status "${{ job.status }}" \
            --collect-from-logs \
            --include-context
