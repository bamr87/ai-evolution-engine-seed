name: üå± Daily Evolution & Maintenance (v0.2.1)

on:
  schedule:
    # Run daily at 3 AM UTC (customize as needed)
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      evolution_type:
        description: 'Type of daily evolution to run'
        required: false
        default: 'consistency'
        type: choice
        options:
          - consistency
          - error_fixing
          - documentation
          - code_quality
          - security_updates
      intensity:
        description: 'Evolution intensity level'
        required: false
        default: 'minimal'
        type: choice
        options:
          - minimal
          - moderate
          - comprehensive
      force_run:
        description: 'Force run even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  EVOLUTION_TYPE: ${{ github.event.inputs.evolution_type || 'consistency' }}
  INTENSITY: ${{ github.event.inputs.intensity || 'minimal' }}
  FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }}

jobs:
  daily_evolution:
    name: üåø Daily Growth & Maintenance
    runs-on: ubuntu-latest
    
    steps:
      - name: üå± Prepare Evolution Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üìä Analyze Repository Health
        id: health_check
        run: |
          echo "üîç Analyzing repository health and detecting improvement opportunities..."
          
          # Check for common issues
          ISSUES_FOUND=0
          SUGGESTIONS=()
          
          # Check for inconsistent formatting
          if find . -name "*.md" -exec grep -l "	" {} \; | head -1 > /dev/null; then
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
            SUGGESTIONS+=("Fix tab/space inconsistencies in Markdown files")
          fi
          
          # Check for TODO comments
          if grep -r "TODO\|FIXME\|XXX" --include="*.md" --include="*.sh" --include="*.yml" . | head -1 > /dev/null; then
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
            SUGGESTIONS+=("Address pending TODO/FIXME items")
          fi
          
          # Check for outdated documentation
          LAST_COMMIT=$(git log -1 --format="%ct")
          README_MODIFIED=$(stat -c %Y README.md 2>/dev/null || stat -f %m README.md 2>/dev/null || echo 0)
          if [ $((LAST_COMMIT - README_MODIFIED)) -gt 604800 ]; then # 7 days
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
            SUGGESTIONS+=("Update documentation to reflect recent changes")
          fi
          
          # Check for broken links (basic check)
          if grep -r "http" --include="*.md" . | grep -v "https://" | head -1 > /dev/null; then
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
            SUGGESTIONS+=("Update insecure HTTP links to HTTPS")
          fi
          
          # Check evolution metrics for staleness
          LAST_EVOLUTION=$(jq -r '.last_growth_spurt' evolution-metrics.json)
          if [ "$LAST_EVOLUTION" != "null" ] && [ "$LAST_EVOLUTION" != "Never" ]; then
            DAYS_SINCE=$(( ($(date +%s) - $(date -d "$LAST_EVOLUTION" +%s)) / 86400 ))
            if [ $DAYS_SINCE -gt 7 ]; then
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
              SUGGESTIONS+=("Repository hasn't evolved in $DAYS_SINCE days - time for growth")
            fi
          fi
          
          echo "issues_found=$ISSUES_FOUND" >> $GITHUB_OUTPUT
          printf 'suggestions<<EOF\n%s\nEOF\n' "$(IFS=$'\n'; echo "${SUGGESTIONS[*]}")" >> $GITHUB_OUTPUT
          
          # Decide if evolution should proceed
          SHOULD_EVOLVE="false"
          if [ "$FORCE_RUN" = "true" ] || [ $ISSUES_FOUND -gt 0 ]; then
            SHOULD_EVOLVE="true"
          fi
          echo "should_evolve=$SHOULD_EVOLVE" >> $GITHUB_OUTPUT
          
          echo "üîç Health Check Complete:"
          echo "  - Issues Found: $ISSUES_FOUND"
          echo "  - Should Evolve: $SHOULD_EVOLVE"
          echo "  - Evolution Type: $EVOLUTION_TYPE"
          echo "  - Intensity: $INTENSITY"

      - name: üß¨ Generate Evolution Prompt
        id: generate_prompt
        if: steps.health_check.outputs.should_evolve == 'true'
        run: |
          echo "üß¨ Generating targeted evolution prompt..."
          
          SUGGESTIONS="${{ steps.health_check.outputs.suggestions }}"
          ISSUES_COUNT="${{ steps.health_check.outputs.issues_found }}"
          
          # Base prompts for different evolution types
          case "$EVOLUTION_TYPE" in
            "consistency")
              BASE_PROMPT="Perform consistency improvements and minor fixes"
              ;;
            "error_fixing")
              BASE_PROMPT="Fix minor errors and improve robustness"
              ;;
            "documentation")
              BASE_PROMPT="Update and improve documentation quality"
              ;;
            "code_quality")
              BASE_PROMPT="Enhance code quality and maintainability"
              ;;
            "security_updates")
              BASE_PROMPT="Apply security improvements and updates"
              ;;
            *)
              BASE_PROMPT="Perform general maintenance and improvements"
              ;;
          esac
          
          # Intensity modifiers
          case "$INTENSITY" in
            "minimal")
              INTENSITY_MODIFIER="Focus on safe, minimal changes that improve consistency without altering functionality."
              ;;
            "moderate")
              INTENSITY_MODIFIER="Apply moderate improvements including minor refactoring and optimization."
              ;;
            "comprehensive")
              INTENSITY_MODIFIER="Perform comprehensive improvements including significant enhancements."
              ;;
          esac
          
          # Construct the full prompt
          EVOLUTION_PROMPT="Daily Evolution Cycle - $BASE_PROMPT
          
          $INTENSITY_MODIFIER
          
          Detected improvement opportunities:
          $SUGGESTIONS
          
          Guidelines for this evolution:
          - Maintain backward compatibility
          - Follow DFF (Design for Failure) principles
          - Keep changes atomic and well-documented
          - Update relevant documentation
          - Preserve existing functionality
          - Focus on incremental improvements
          
          Priority areas:
          1. Fix any inconsistencies in formatting or structure
          2. Address TODO/FIXME items where appropriate
          3. Update outdated documentation or examples
          4. Improve error handling and resilience
          5. Enhance code readability and maintainability"
          
          # Save the prompt for the main evolution workflow
          echo "evolution_prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$EVOLUTION_PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üß¨ Evolution prompt generated successfully"

      - name: üöÄ Trigger Evolution Workflow
        if: steps.health_check.outputs.should_evolve == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Triggering main evolution workflow..."
          
          EVOLUTION_PROMPT="${{ steps.generate_prompt.outputs.evolution_prompt }}"
          
          # Trigger the main ai_evolver.yml workflow
          gh workflow run ai_evolver.yml \
            -f prompt="$EVOLUTION_PROMPT" \
            -f growth_mode="conservative" \
            -f auto_plant_seeds=true
          
          echo "‚úÖ Daily evolution cycle initiated successfully"
          echo "üìù View the evolution progress in the Actions tab"

      - name: üìä Update Daily Evolution Metrics
        if: steps.health_check.outputs.should_evolve == 'true'
        run: |
          echo "üìä Recording daily evolution metrics..."
          
          # Create or update daily evolution tracking
          DAILY_METRICS_FILE=".evolution_daily.json"
          
          if [ ! -f "$DAILY_METRICS_FILE" ]; then
            echo '{
              "daily_evolution_version": "1.0",
              "first_run": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "total_daily_cycles": 0,
              "last_daily_evolution": null,
              "evolution_types": {
                "consistency": 0,
                "error_fixing": 0,
                "documentation": 0,
                "code_quality": 0,
                "security_updates": 0
              },
              "daily_history": []
            }' > "$DAILY_METRICS_FILE"
          fi
          
          # Update metrics
          UPDATED_METRICS=$(jq \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --arg evolution_type "$EVOLUTION_TYPE" \
            --arg intensity "$INTENSITY" \
            --argjson issues_found "${{ steps.health_check.outputs.issues_found }}" \
            '.total_daily_cycles += 1 |
             .last_daily_evolution = $timestamp |
             .evolution_types[$evolution_type] += 1 |
             .daily_history += [{
               "timestamp": $timestamp,
               "evolution_type": $evolution_type,
               "intensity": $intensity,
               "issues_found": $issues_found,
               "trigger": (if "${{ github.event_name }}" == "schedule" then "automated" else "manual" end)
             }] |
             .daily_history = (.daily_history | sort_by(.timestamp) | .[-30:])' \
            "$DAILY_METRICS_FILE")
          
          echo "$UPDATED_METRICS" > "$DAILY_METRICS_FILE"
          
          echo "üìä Daily evolution metrics updated"
          echo "  - Total Daily Cycles: $(jq -r '.total_daily_cycles' "$DAILY_METRICS_FILE")"
          echo "  - Evolution Type: $EVOLUTION_TYPE"
          echo "  - Intensity: $INTENSITY"

      - name: üå± No Evolution Needed
        if: steps.health_check.outputs.should_evolve == 'false'
        run: |
          echo "üå± Repository health check complete - no evolution needed"
          echo "‚úÖ Repository is in good health!"
          echo "üîÑ Next automated check will run tomorrow at 3 AM UTC"
          echo ""
          echo "To force an evolution cycle, run:"
          echo "  gh workflow run daily_evolution.yml -f force_run=true"
