name: 🌱 AI Evolution Engine (v3.0.0)

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      evolution_type:
        description: 'Type of evolution to run'
        required: false
        default: 'consistency'
        type: choice
        options:
          - consistency
          - error_fixing
          - documentation
          - code_quality
          - security_updates
          - custom
      intensity:
        description: 'Evolution intensity level'
        required: false
        default: 'minimal'
        type: choice
        options:
          - minimal
          - moderate
          - comprehensive
      growth_mode:
        description: 'Growth strategy'
        required: false
        default: 'conservative'
        type: choice
        options:
          - conservative
          - adaptive
          - experimental
      prompt:
        description: 'Custom evolution prompt (required for custom type)'
        required: false
        type: string
      dry_run:
        description: 'Run in simulation mode without making actual changes'
        required: false
        default: false
        type: boolean
      create_pr:
        description: 'Create pull request for changes'
        required: false
        default: true
        type: boolean

  # Scheduled runs
  schedule:
    # Daily maintenance at 3 AM UTC
    - cron: '0 3 * * *'
    # Weekly consistency check at 2 AM UTC on Mondays
    - cron: '0 2 * * 1'

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  EVOLUTION_VERSION: "3.0.0"
  WORKFLOW_TYPE: "evolution"
  CI_ENVIRONMENT: "true"

jobs:
  evolve:
    name: 🌿 Evolution Cycle
    runs-on: ubuntu-latest
    
    env:
      EVOLUTION_TYPE: ${{ github.event.inputs.evolution_type || 'consistency' }}
      INTENSITY: ${{ github.event.inputs.intensity || 'minimal' }}
      GROWTH_MODE: ${{ github.event.inputs.growth_mode || 'conservative' }}
      PROMPT: ${{ github.event.inputs.prompt || '' }}
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      CREATE_PR: ${{ github.event.inputs.create_pr || 'true' }}
    
    steps:
      - name: 🌱 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️ Setup Environment
        run: |
          echo "🔧 Setting up evolution environment..."
          
          # Fix shell configuration
          echo "🔧 Configuring shell environment..."
          export SHELL=/bin/bash
          export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
          
          # Install dependencies
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq curl git tree
          
          # Install GitHub CLI
          if ! command -v gh >/dev/null 2>&1; then
            echo "📦 Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update -qq
            sudo apt-get install -y -qq gh
          fi
          
          # Make scripts executable
          find . -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
          
          # Run setup script if available
          if [[ -f "./scripts/setup.sh" ]]; then
            echo "🔧 Running setup script..."
            ./scripts/setup.sh --no-deps --no-prereqs || echo "⚠️ Setup script completed with warnings"
          else
            echo "⚠️ Setup script not found, using basic setup"
          fi

      - name: 🔍 Verify Environment
        run: |
          echo "🔍 Verifying environment setup..."
          
          # Check essential tools
          echo "📦 Checking installed tools..."
          command -v jq >/dev/null 2>&1 && echo "✅ jq is available" || echo "❌ jq not found"
          command -v git >/dev/null 2>&1 && echo "✅ git is available" || echo "❌ git not found"
          command -v gh >/dev/null 2>&1 && echo "✅ gh is available" || echo "❌ gh not found"
          
          # Check script permissions
          echo "📜 Checking script permissions..."
          if [[ -x "./scripts/evolve.sh" ]]; then
            echo "✅ evolve.sh is executable"
          else
            echo "❌ evolve.sh is not executable"
            chmod +x ./scripts/evolve.sh
          fi
          
          # Test basic functionality
          echo "🧪 Testing basic functionality..."
          if ./scripts/evolve.sh --help >/dev/null 2>&1; then
            echo "✅ evolve.sh is working"
          else
            echo "❌ evolve.sh is not working"
            exit 1
          fi

      - name: 🧪 Run Pre-Evolution Tests
        run: |
          echo "🧪 Running pre-evolution validation..."
          
          if [[ -f "./scripts/test.sh" ]]; then
            ./scripts/test.sh validation || echo "⚠️ Test script completed with warnings"
          else
            echo "⚠️ Test script not found, skipping validation"
          fi

      - name: 🔍 Collect Repository Context
        id: context
        run: |
          echo "🔍 Collecting repository context..."
          
          # Create output directory
          mkdir -p evolution-output
          
          # Run context collection
          if [[ -f "./scripts/evolve.sh" ]]; then
            if ./scripts/evolve.sh context -o evolution-output; then
              echo "✅ Context collection completed"
            else
              echo "❌ Context collection failed"
              exit 1
            fi
          else
            echo "❌ Evolution script not found"
            exit 1
          fi
          
          # Check if context was created
          if [[ -f "evolution-output/repo-context.json" ]]; then
            echo "✅ Context collected successfully"
            echo "context_file=evolution-output/repo-context.json" >> $GITHUB_OUTPUT
          else
            echo "❌ Context collection failed - no output file created"
            exit 1
          fi

      - name: 🤖 Simulate AI Evolution
        id: simulation
        run: |
          echo "🤖 Simulating AI evolution..."
          
          # Determine prompt
          if [[ "$EVOLUTION_TYPE" == "custom" && -n "$PROMPT" ]]; then
            EVOLUTION_PROMPT="$PROMPT"
          else
            case "$EVOLUTION_TYPE" in
              "consistency")
                EVOLUTION_PROMPT="Fix formatting, naming, and structural inconsistencies"
                ;;
              "error_fixing")
                EVOLUTION_PROMPT="Address bugs, errors, and improve robustness"
                ;;
              "documentation")
                EVOLUTION_PROMPT="Update and improve documentation quality"
                ;;
              "code_quality")
                EVOLUTION_PROMPT="Enhance code maintainability and readability"
                ;;
              "security_updates")
                EVOLUTION_PROMPT="Apply security improvements and updates"
                ;;
              *)
                EVOLUTION_PROMPT="Perform general improvements and optimizations"
                ;;
            esac
          fi
          
          # Run simulation
          if [[ -f "./scripts/evolve.sh" ]]; then
            if ./scripts/evolve.sh simulate -p "$EVOLUTION_PROMPT" -m "$GROWTH_MODE" -o evolution-output; then
              echo "✅ Evolution simulation completed"
            else
              echo "❌ Evolution simulation failed"
              exit 1
            fi
          else
            echo "❌ Evolution script not found"
            exit 1
          fi
          
          # Check if response was created
          if [[ -f "evolution-output/evolution-response.json" ]]; then
            echo "✅ Evolution simulated successfully"
            echo "response_file=evolution-output/evolution-response.json" >> $GITHUB_OUTPUT
          else
            echo "❌ Evolution simulation failed - no response file created"
            exit 1
          fi

      - name: 🔧 Apply Evolution Changes
        if: env.DRY_RUN != 'true'
        run: |
          echo "🔧 Applying evolution changes..."
          
          if [[ -f "./scripts/evolve.sh" && -f "evolution-output/evolution-response.json" ]]; then
            ./scripts/evolve.sh apply evolution-output/evolution-response.json || echo "⚠️ Apply script completed with warnings"
          else
            echo "❌ Cannot apply changes - missing files"
            exit 1
          fi

      - name: 🔍 Preview Changes (Dry Run)
        if: env.DRY_RUN == 'true'
        run: |
          echo "🔍 DRY RUN MODE - Changes that would be applied:"
          
          if [[ -f "evolution-output/evolution-response.json" ]]; then
            jq -r '.changes[] | "  - \(.action) \(.file): \(.description)"' evolution-output/evolution-response.json 2>/dev/null || echo "  - Changes would be applied"
          else
            echo "  - No changes preview available"
          fi

      - name: 🧪 Validate Changes
        if: env.DRY_RUN != 'true'
        run: |
          echo "🧪 Validating applied changes..."
          
          if [[ -f "./scripts/evolve.sh" ]]; then
            ./scripts/evolve.sh validate || echo "⚠️ Validation script completed with warnings"
          else
            echo "⚠️ Validation script not found"
          fi

      - name: 📊 Create Pull Request
        if: env.DRY_RUN != 'true' && env.CREATE_PR == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 Creating pull request..."
          
          # Configure git for GitHub CLI
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "ℹ️ No changes to commit"
            exit 0
          fi
          
          # Create branch
          BRANCH_NAME="evolution/$(date +%Y%m%d-%H%M%S)"
          echo "🌿 Creating branch: $BRANCH_NAME"
          
          if ! git checkout -b "$BRANCH_NAME"; then
            echo "❌ Failed to create branch"
            exit 1
          fi
          
          # Commit changes
          echo "📝 Committing changes..."
          git add .
          if ! git commit -m "🌱 Evolution: $EVOLUTION_TYPE ($INTENSITY intensity, $GROWTH_MODE mode)"; then
            echo "❌ Failed to commit changes"
            exit 1
          fi
          
          # Push branch
          echo "🚀 Pushing branch..."
          if ! git push origin "$BRANCH_NAME"; then
            echo "❌ Failed to push branch"
            exit 1
          fi
          
          # Create PR using GitHub CLI
          echo "🔗 Creating pull request..."
          if command -v gh >/dev/null 2>&1; then
            # Authenticate with GitHub CLI
            echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
            
            if gh pr create \
              --title "🌱 Evolution: $EVOLUTION_TYPE improvements" \
              --body "Automated evolution cycle:\n\n- **Type**: $EVOLUTION_TYPE\n- **Intensity**: $INTENSITY\n- **Mode**: $GROWTH_MODE\n- **Prompt**: $EVOLUTION_PROMPT\n\nThis PR contains improvements generated by the AI Evolution Engine." \
              --base main \
              --head "$BRANCH_NAME"; then
              echo "✅ Pull request created successfully"
            else
              echo "❌ Failed to create pull request"
              exit 1
            fi
          else
            echo "⚠️ GitHub CLI not available, manual PR creation required"
            echo "Branch: $BRANCH_NAME"
            exit 1
          fi

      - name: 📋 Generate Report
        if: always()
        run: |
          echo "📋 Generating evolution report..."
          
          # Create report
          {
            echo "# Evolution Report"
            echo ""
            echo "**Date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo "**Type**: $EVOLUTION_TYPE"
            echo "**Intensity**: $INTENSITY"
            echo "**Mode**: $GROWTH_MODE"
            echo "**Dry Run**: $DRY_RUN"
            echo ""
            echo "## Summary"
            echo "- Context collection: ${{ steps.context.outcome }}"
            echo "- AI simulation: ${{ steps.simulation.outcome }}"
            echo "- Changes applied: ${{ env.DRY_RUN != 'true' && 'Yes' || 'No (dry run)' }}"
            echo ""
            echo "## Files Modified"
            jq -r '.changes[] | "- \(.file): \(.description)"' evolution-output/evolution-response.json 2>/dev/null || echo "- No changes recorded"
            echo ""
            echo "## Metrics"
            jq -r '.metrics | "- Files modified: \(.files_modified // 0)"' evolution-output/evolution-response.json 2>/dev/null || echo "- Metrics not available"
          } > evolution-output/report.md
          
          echo "✅ Report generated: evolution-output/report.md"

      - name: 🧪 Run Post-Evolution Tests
        if: always()
        run: |
          echo "🧪 Running post-evolution tests..."
          
          if [[ -f "./scripts/test.sh" ]]; then
            ./scripts/test.sh validation || echo "⚠️ Test script completed with warnings"
          else
            echo "⚠️ Test script not found, skipping validation"
          fi

      - name: 📊 Upload Evolution Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evolution-artifacts
          path: |
            evolution-output/
            logs/
          retention-days: 30 