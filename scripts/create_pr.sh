#!/usr/bin/env bash
# scripts/create_pr.sh
# Usage: create_pr.sh RESPONSE_FILE PROMPT GROWTH_MODE
# Creates a pull request with evolution changes

set -euo pipefail

# Get script directory for relative imports
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Source modular libraries
source "$PROJECT_ROOT/src/lib/core/logger.sh"
source "$PROJECT_ROOT/src/lib/core/environment.sh"

# Initialize logging
init_logger "logs" "create-pr"

# Validate input parameters
if [[ $# -lt 3 ]]; then
    log_error "Usage: $0 <response_file> <prompt> <growth_mode>"
    exit 1
fi

RESPONSE_FILE="$1"
PROMPT="$2"
GROWTH_MODE="$3"

log_info "Creating pull request for evolution changes"
log_info "Response file: $RESPONSE_FILE"
log_info "Growth mode: $GROWTH_MODE"

# Validate inputs
if [ ! -f "$RESPONSE_FILE" ]; then
    log_error "Response file not found: $RESPONSE_FILE"
    exit 1
fi

log_info "üå≥ Creating growth pull request..."

# Extract data from response file
BRANCH_NAME=$(jq -r .new_branch "$RESPONSE_FILE" 2>/dev/null || echo "")
COMMIT_MSG=$(jq -r .commit_message "$RESPONSE_FILE" 2>/dev/null || echo "")
NEXT_SEED_PREVIEW=$(jq -r .next_seed_content "$RESPONSE_FILE" 2>/dev/null | head -n 20 || echo "")

# Validate extracted data
if [ -z "$BRANCH_NAME" ] || [ "$BRANCH_NAME" = "null" ]; then
    echo "‚ùå Error: Could not extract branch name from response file"
    exit 1
fi

if [ -z "$COMMIT_MSG" ] || [ "$COMMIT_MSG" = "null" ]; then
    COMMIT_MSG="üåø AI Evolution Cycle: $PROMPT"
fi

echo "üìã PR Details:"
echo "  - Branch: $BRANCH_NAME"
echo "  - Commit: $COMMIT_MSG"
echo "  - Growth Mode: $GROWTH_MODE"

# Check GitHub CLI authentication
if ! command -v gh >/dev/null 2>&1; then
    echo "‚ùå Error: GitHub CLI (gh) not found"
    exit 1
fi

# Verify authentication
if [ -n "${GH_TOKEN:-}" ]; then
    echo "‚úÖ GitHub token configured"
    export GH_TOKEN="${GH_TOKEN}"
elif [ -n "${PAT_TOKEN:-}" ]; then
    echo "‚úÖ PAT token configured"
    export GH_TOKEN="${PAT_TOKEN}"
else
    echo "‚ö†Ô∏è  No GitHub token found, checking gh auth status..."
    if ! gh auth status >/dev/null 2>&1; then
        echo "‚ùå Error: GitHub CLI not authenticated and no token provided"
        echo "   Please run 'gh auth login' or set GH_TOKEN/PAT_TOKEN"
        exit 1
    fi
fi

# Build PR body with enhanced information
PR_BODY=$(cat <<EOF_PR_BODY
## üå± AI-Driven Growth Cycle Completed

**Growth Mode:** "$GROWTH_MODE"  
**Original Prompt:** "$PROMPT"  
**Evolution Version:** v0.3.0  
**Branch:** \`$BRANCH_NAME\`

### üåø Summary of Changes in this Cycle:
This cycle focused on evolving the codebase based on the provided prompt. The AI Evolution Engine analyzed the repository structure, current metrics, and applied targeted improvements.

**Key Changes Include:**
- üìä Updated evolution-metrics.json with new cycle data
- üìù Modified README.md dynamic content blocks
- üß¨ Applied growth-specific modifications based on prompt analysis
- üå∞ Generated next-generation seed for future evolution

### üéØ Growth Analysis:
- **Prompt Processing:** Successfully analyzed and interpreted growth instructions
- **Code Evolution:** Applied systematic improvements following DFF principles
- **Documentation Updates:** Maintained consistency across all documentation
- **Metrics Tracking:** Recorded evolution progress and adaptation history

### üå∞ Next Generation Seed (.seed.md) Highlights:
The following .seed.md has been generated to guide the next evolution cycle:

\`\`\`markdown
$NEXT_SEED_PREVIEW
... (see .seed.md in branch for full content)
\`\`\`

### üîç Pre-merge Checklist:
- [ ] Review all changed files for quality and consistency
- [ ] Verify evolution metrics are correctly updated
- [ ] Confirm documentation changes align with code modifications  
- [ ] Test that new seed file is properly formatted
- [ ] Validate that repository structure remains intact

### üöÄ Next Steps:
1. Review and merge this PR to apply the evolution
2. The planted seed (\`.seed.md\`) will guide the next growth cycle
3. Consider running another evolution cycle with refined prompts
4. Monitor repository health and adaptation success

---
*üå± Generated by AI Evolution Engine v0.3.0*  
*Commit: $COMMIT_MSG*  
*Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)*
EOF_PR_BODY
)

echo "üöÄ Creating pull request..."

# Create the pull request with error handling
if gh pr create \
  --title "$COMMIT_MSG" \
  --body "$PR_BODY" \
  --base main \
  --head "$BRANCH_NAME" \
  --label "ai-evolution,automated" 2>/dev/null; then
    
    echo "‚úÖ Pull request created successfully!"
    
    # Get PR URL for reference
    PR_URL=$(gh pr view "$BRANCH_NAME" --json url --jq .url 2>/dev/null || echo "")
    if [ -n "$PR_URL" ]; then
        echo "üîó PR URL: $PR_URL"
    fi
    
else
    echo "‚ùå Failed to create pull request"
    echo "   This might be due to:"
    echo "   - Branch already has an open PR"
    echo "   - Insufficient permissions"
    echo "   - Network connectivity issues"
    echo "   - Invalid repository configuration"
    
    # Try to get more information
    echo ""
    echo "üîç Debugging information:"
    echo "  - Current branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
    echo "  - Remote origin: $(git remote get-url origin 2>/dev/null || echo 'not set')"
    echo "  - Repository: $(gh repo view --json nameWithOwner --jq .nameWithOwner 2>/dev/null || echo 'unknown')"
    
    exit 1
fi
